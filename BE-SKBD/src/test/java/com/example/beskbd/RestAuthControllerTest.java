package com.example.beskbd;
// Generated by Qodo Gen

import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.Appender;
import com.example.beskbd.dto.request.*;
import com.example.beskbd.dto.response.ApiResponse;
import com.example.beskbd.dto.response.AuthenticationResponse;
import com.example.beskbd.entities.User;
import com.example.beskbd.exception.AppException;
import com.example.beskbd.exception.ErrorCode;


import com.example.beskbd.repositories.UserRepository;
import com.example.beskbd.rest.RestAuthController;
import com.example.beskbd.services.AuthenticationService;
import com.example.beskbd.services.UserService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.ConstraintViolationException;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.time.LocalDateTime;
import java.util.Optional;

import static org.hibernate.validator.internal.util.Contracts.assertNotNull;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
@SpringBootTest(
        webEnvironment = SpringBootTest.WebEnvironment.MOCK,
        classes = BeSkbdApplication.class)
@AutoConfigureMockMvc
@TestPropertySource(
        locations = "classpath:application-integrationtest.properties")
@ExtendWith(MockitoExtension.class)
public class RestAuthControllerTest {

    @Mock
    AuthenticationService authenticationService;
    @InjectMocks
    RestAuthController restAuthController;
    @Mock
    UserService userService;
    @MockBean
    UserRepository userRepository;


    @Test
    public void test_authenticate_with_valid_credentials() {
        // Arrange
        AuthenticationRequest request = new AuthenticationRequest("validUser", "validPassword");
        AuthenticationResponse expectedResponse = AuthenticationResponse.builder()
                .token("validToken")
                .authenticated(true)
                .build();
        when(authenticationService.authenticate(request)).thenReturn(expectedResponse);

        // Act
        ApiResponse<AuthenticationResponse> response = restAuthController.authenticate(request);

        // Assert
        assertNotNull(response);
        assertEquals(expectedResponse, response.getData());
    }

    @Test
    public void test_authenticate_with_invalid_credentials() {
        // Arrange
        AuthenticationRequest request = new AuthenticationRequest("invalidUser", "invalidPassword");
        when(authenticationService.authenticate(request))
                .thenThrow(new AppException(ErrorCode.UNAUTHENTICATED));

        // Act & Assert
        AppException exception = assertThrows(AppException.class, () -> restAuthController.authenticate(request));
        assertEquals(ErrorCode.UNAUTHENTICATED, exception.getErrorCode());
    }

    @Test
    public void test_logout_with_valid_token() {
        // Arrange
        LogoutRequest request = new LogoutRequest("validToken");

        // Act
        ResponseEntity<?> response = restAuthController.logout(request);

        // Assert
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    // Register user with missing required fields
    @Test
    public void test_register_user_with_missing_required_fields() {
        // Arrange
        UserCreationRequest request = UserCreationRequest.builder()
            .username("user") // Missing password and other fields
            .build();

        when(userService.createUser(request)).thenThrow(new AppException(ErrorCode.INVALID_REQUEST));

        // Act & Assert
        assertThrows(AppException.class, () -> restAuthController.registerUser(request));
    }

    // Refresh token with a valid refresh token


    // Refresh token with an expired or invalid token
    @Test
    public void test_refresh_token_with_invalid_token() {
        // Arrange
        RefreshRequest request = new RefreshRequest("invalidToken");
        when(authenticationService.refreshToken(request)).thenThrow(new AppException(ErrorCode.UNSUPPORTED_TOKEN));

        // Act & Assert
        assertThrows(AppException.class, () -> restAuthController.refreshToken(request));
    }

    // Logout with an invalid or expired token
    @Test
    public void test_logout_with_invalid_or_expired_token() {
        // Arrange
        LogoutRequest request = new LogoutRequest("invalidOrExpiredToken");
        doThrow(new AppException(ErrorCode.UNAUTHENTICATED))
            .when(authenticationService).logout(request);

        // Act & Assert
        AppException exception = assertThrows(AppException.class, () -> {
            restAuthController.logout(request);
        });

        assertEquals(ErrorCode.UNAUTHENTICATED, exception.getErrorCode());
    }

    // Request password reset with a non-existent email
    @Test
    public void test_forgot_password_with_non_existent_email() {
        // Arrange
        String nonExistentEmail = "nonexistent@example.com";
        ForgotPasswordRequest request = new ForgotPasswordRequest();
        request.setEmail(nonExistentEmail);
        HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    
        doThrow(new AppException(ErrorCode.EMAIL_NOT_EXISTS))
            .when(userService).forgotPassword(nonExistentEmail,  httpServletRequest);

        // Act & Assert
        AppException exception = assertThrows(AppException.class, () -> {
            restAuthController.forgotPassword(request,  httpServletRequest);
        });

        assertEquals(ErrorCode.EMAIL_NOT_EXISTS, exception.getErrorCode());
    }

    // Ensure JWT token generation and validation
    @Test
    public void test_refresh_token_with_valid_refresh_token() {
        // Arrange
        RefreshRequest request = new RefreshRequest("validRefreshToken");
        AuthenticationResponse expectedResponse = AuthenticationResponse.builder()
            .token("newValidToken")
            .authenticated(true)
            .build();
        when(authenticationService.refreshToken(request)).thenReturn(expectedResponse);

        // Act
        ApiResponse<AuthenticationResponse> response = restAuthController.refreshToken(request);

        // Assert
        assertNotNull(response);
        assertEquals(expectedResponse, response.getData());
    }

    // Ensure password reset token is valid for a limited time
    @Test
    public void test_forgot_password_token_validity() {
        // Arrange
        String email = "user@example.com";
        ForgotPasswordRequest request = new ForgotPasswordRequest();
        request.setEmail(email);
        HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
    
        User user = User.builder()
            .email(email)
            .resetToken("resetToken")
            .resetTokenExpiryDate(LocalDateTime.now().plusHours(1))
            .build();


        when(userRepository.findByEmail(email)).thenReturn(Optional.of(user));

        // Act
        ResponseEntity<ApiResponse<Void>> response = restAuthController.forgotPassword(request, httpServletRequest);
    
        // Assert
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(user.getResetTokenExpiryDate().isAfter(LocalDateTime.now()));
    }

    // Log security-related actions for audit purposes
    @Test
    public void test_logout_logs_security_action() {
        // Arrange
        LogoutRequest request = new LogoutRequest("validToken");
        doNothing().when(authenticationService).logout(any(LogoutRequest.class)); // Use any() for flexibility

        Logger logger = LoggerFactory.getLogger(RestAuthController.class);
        Appender<ILoggingEvent> mockAppender = mock(Appender.class);
        ((ch.qos.logback.classic.Logger) logger).addAppender(mockAppender);

        // Act
        ResponseEntity<?> response = restAuthController.logout(request);

        // Assert
        assertNotNull(response); // Optional: check response is not null

        // Verify that the logout method was called with the correct argument
        verify(authenticationService, times(1)).logout(argThat(logoutRequest ->
                "validToken".equals(logoutRequest.getToken()))); // Check the token directly

        verify(mockAppender, atLeastOnce()).doAppend(argThat(event ->
                event.getFormattedMessage().contains("User logged out")));
    }

    // Handle authentication service exceptions gracefully
    @Test
    public void test_authenticate_with_non_existent_user() {
        // Arrange
        AuthenticationRequest request = new AuthenticationRequest("nonExistentUser", "anyPassword");
        when(authenticationService.authenticate(request))
            .thenThrow(new AppException(ErrorCode.USER_NOT_EXISTED));

        // Act & Assert
        AppException exception = assertThrows(AppException.class, () -> {
            restAuthController.authenticate(request);
        });
        assertEquals(ErrorCode.USER_NOT_EXISTED, exception.getErrorCode());
    }

    // Validate input data using annotations
    @Test
    public void test_register_user_with_invalid_username() {
        // Arrange
        UserCreationRequest request = UserCreationRequest.builder()
            .username("usr") // Invalid username, less than 6 characters
            .password("validPassword123")
            .firstName("John")
            .lastName("Doe")
            .email("john.doe@example.com")
            .phone("1234567890")
            .address("123 Main St")
            .build();

        // Act & Assert
        assertThrows(ConstraintViolationException.class, () -> {
            restAuthController.registerUser(request);
        });
    }

    // Request password reset with a valid email
    @Test
    public void test_forgot_password_with_valid_email() {
        // Arrange
        String email = "valid@example.com";
        ForgotPasswordRequest requestBody = new ForgotPasswordRequest();
        requestBody.setEmail(email);
        HttpServletRequest httpRequest = mock(HttpServletRequest.class);

        // Act
        ResponseEntity<ApiResponse<Void>> response = restAuthController.forgotPassword(requestBody, httpRequest);

        // Assert
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }
}