package com.example.beskbd;
// Generated by Qodo Gen



import com.example.beskbd.dto.request.OrderCreationRequest;
import com.example.beskbd.dto.response.ApiResponse;
import com.example.beskbd.entities.Order;
import com.example.beskbd.entities.User;
import com.example.beskbd.exception.AppException;
import com.example.beskbd.exception.ErrorCode;
import com.example.beskbd.rest.RestOrderController;

import com.example.beskbd.services.OrderService;
import org.junit.Test;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;
import ch.qos.logback.classic.Logger;
import ch.qos.logback.core.read.ListAppender;
import ch.qos.logback.classic.spi.ILoggingEvent;
import org.assertj.core.api.Assertions;
import org.slf4j.LoggerFactory;


import org.springframework.http.ResponseEntity;


import java.util.Collections;
import java.util.List;
import java.util.Objects;

import static org.hibernate.validator.internal.util.Contracts.assertNotNull;
import static org.junit.Assert.*;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class RestOrderControllerTest {

    @InjectMocks
    RestOrderController restOrderController;// Creating an order with valid data returns a successful response
    private ListAppender<ILoggingEvent> listAppender;
    private Logger logger;
    @BeforeEach
    public void setupLogger() {
        // Initialize logger and ListAppender before each test
        logger = (Logger) LoggerFactory.getLogger(RestOrderController.class);
        listAppender = new ListAppender<>();
        logger.addAppender(listAppender);
        listAppender.start();
    }

    @AfterEach
    public void cleanupLogger() {
        // Remove the ListAppender and reset logger state
        logger.detachAppender(listAppender);
        listAppender.stop();
    }
    @Test
    public void test_create_order_with_valid_data() {
        // Arrange
        OrderCreationRequest request = new OrderCreationRequest();
        request.setUserId(new User());
        request.setProductDescription("Sample Product");
        request.setShippingAddress("123 Sample Street");
        request.setOrderItemsID(1L);
    
        OrderService orderService = mock(OrderService.class);
        RestOrderController controller = new RestOrderController(orderService);
    
        // Act
        ResponseEntity<?> response = controller.createOrder(request);
    
        // Assert
        assertNotNull(response);
        assertTrue(Objects.requireNonNull(response.getBody()).toString().contains("success"));
    }

    // Creating an order with null request throws an exception
    @Test
    public void test_create_order_with_null_request() {
        // Arrange
        OrderService orderService = mock(OrderService.class);
        // Simulate the service throwing AppException when addOrder is called with null
        doThrow(new AppException(ErrorCode.INVALID_REQUEST)).when(orderService).addOrder(null);

        RestOrderController controller = new RestOrderController(orderService);

        // Act
        ResponseEntity<ApiResponse> response = controller.createOrder(null);

        // Assert
        assertNotNull(response);
        assertFalse(response.getBody().getSuccess());
        assertEquals(ErrorCode.INVALID_REQUEST.getCode(), response.getBody().getErrorCode());
        assertEquals(ErrorCode.INVALID_REQUEST.getMessage(), response.getBody().getErrorMessage());
    }

    // Fetching all orders returns a list of orders
    @Test
    public void test_fetch_all_orders_returns_list_of_orders() {
        // Arrange
        OrderService orderService = mock(OrderService.class);
        RestOrderController controller = new RestOrderController(orderService);
        List<Order> mockOrders = List.of(new Order(), new Order());
        when(orderService.getAllOrders()).thenReturn(mockOrders);

        // Act
        ResponseEntity<ApiResponse> response = controller.getOrders();

        // Assert
        assertNotNull(response);
        assertTrue(response.getBody().getSuccess());
        assertEquals(mockOrders, response.getBody().getData());
    }

    // Logging occurs when fetching orders
    @Test
    public void test_logging_when_fetching_orders() {
        // Arrange
        OrderService orderService = mock(OrderService.class);
        List<Order> mockOrders = List.of(new Order(), new Order());
        when(orderService.getAllOrders()).thenReturn(mockOrders);

        RestOrderController controller = new RestOrderController(orderService);

        // Set up ListAppender to capture logs
        Logger logger = (Logger) LoggerFactory.getLogger(RestOrderController.class);
        ListAppender<ILoggingEvent> listAppender = new ListAppender<>();
        logger.addAppender(listAppender);
        listAppender.start();

        // Act
        controller.getOrders();

        // Stop the appender and assert logs
        listAppender.stop();

        // Assert
        Assertions.assertThat(listAppender.list)
                .extracting(ILoggingEvent::getFormattedMessage)
                .anyMatch(message -> message.contains("Fetching new orders"));
    }


    // The order creation request is correctly passed to the service layer
    @Test
    public void test_create_order_request_passed_to_service() {
        // Arrange
        OrderCreationRequest request = new OrderCreationRequest();
        request.setUserId(new User());
        request.setProductDescription("Sample Product");
        request.setShippingAddress("123 Sample Street");
        request.setOrderItemsID(1L);

        OrderService orderService = mock(OrderService.class);
        RestOrderController controller = new RestOrderController(orderService);

        // Act
        controller.createOrder(request);

        // Assert
        verify(orderService, times(1)).addOrder(request);
    }

    // Creating an order with invalid orderItemsID throws an exception
    @Test
    public void test_create_order_with_invalid_orderItemsID_throws_exception() {
        // Arrange
        OrderCreationRequest request = new OrderCreationRequest();
        request.setUserId(new User());
        request.setProductDescription("Sample Product");
        request.setShippingAddress("123 Sample Street");
        request.setOrderItemsID(-1L); // Invalid ID

        // Mock the behavior of the service to throw an AppException
        OrderService orderService = mock(OrderService.class);
        doThrow(new AppException(ErrorCode.INVALID_REQUEST)).when(orderService).addOrder(request);

        RestOrderController controller = new RestOrderController(orderService);

        // Act
        ResponseEntity<ApiResponse> response = controller.createOrder(request);

        // Assert
        assertNotNull(response);
        assertFalse(response.getBody().getSuccess()); // Check if success is false
        assertEquals(ErrorCode.INVALID_REQUEST.getCode(), response.getBody().getErrorCode()); // Verify error code
        assertEquals(ErrorCode.INVALID_REQUEST.getMessage(), response.getBody().getErrorMessage()); // Verify error message
    }


    // Creating an order with missing user information throws an exception
    @Test
    public void test_create_order_with_missing_user_information() {
        // Arrange
        OrderCreationRequest request = new OrderCreationRequest();
        request.setProductDescription("Sample Product");
        request.setShippingAddress("123 Sample Street");
        request.setOrderItemsID(1L);  // Missing user information

        // Mock the behavior of the service to throw an AppException
        OrderService orderService = mock(OrderService.class);
        doThrow(new AppException(ErrorCode.INVALID_REQUEST)).when(orderService).addOrder(request);

        RestOrderController controller = new RestOrderController(orderService);

        // Act
        ResponseEntity<ApiResponse> response = controller.createOrder(request);

        // Assert
        assertNotNull(response);
        assertFalse(response.getBody().getSuccess()); // Check if success is false
        assertEquals(ErrorCode.INVALID_REQUEST.getCode(), response.getBody().getErrorCode()); // Verify error code
        assertEquals(ErrorCode.INVALID_REQUEST.getMessage(), response.getBody().getErrorMessage()); // Verify error message
    }


    // Fetching orders when none exist returns an empty list
    @Test
    public void test_get_orders_returns_empty_list_when_no_orders_exist() {
        // Arrange
        OrderService orderService = mock(OrderService.class);
        when(orderService.getAllOrders()).thenReturn(Collections.emptyList());
        RestOrderController controller = new RestOrderController(orderService);

        // Act
        ResponseEntity<ApiResponse> response = controller.getOrders();

        // Assert
        assertNotNull(response);
        assertTrue(response.getBody().getSuccess());
        assertTrue(((List<Order>) response.getBody().getData()).isEmpty());
    }

    // The response for order creation includes a success flag
    @Test
    public void test_create_order_response_includes_success_flag() {
        // Arrange
        OrderCreationRequest request = new OrderCreationRequest();
        request.setUserId(new User());
        request.setProductDescription("Sample Product");
        request.setShippingAddress("123 Sample Street");
        request.setOrderItemsID(1L);

        OrderService orderService = mock(OrderService.class);
        RestOrderController controller = new RestOrderController(orderService);

        // Act
        ResponseEntity<ApiResponse> response = controller.createOrder(request);

        // Assert
        assertNotNull(response);
        assertTrue(response.getBody().getSuccess());
    }

    // The response for fetching orders includes the order data
    @Test
    public void test_get_orders_includes_order_data() {
        // Arrange
        OrderService orderService = mock(OrderService.class);
        RestOrderController controller = new RestOrderController(orderService);
        List<Order> mockOrders = List.of(new Order(), new Order());
        when(orderService.getAllOrders()).thenReturn(mockOrders);

        // Act
        ResponseEntity<ApiResponse> response = controller.getOrders();

        // Assert
        assertNotNull(response);
        assertTrue(response.getBody().getSuccess());
        assertEquals(mockOrders, response.getBody().getData());
    }

    // Order fetching logs the action
    @Test
    public void test_fetch_orders_logs_action() {
        // Arrange
        OrderService orderService = mock(OrderService.class);
        List<Order> orders = List.of(new Order(), new Order());
        when(orderService.getAllOrders()).thenReturn(orders);
        RestOrderController controller = new RestOrderController(orderService);
        Logger logger = mock(Logger.class);
        restOrderController.logger = logger;

        // Act
        ResponseEntity<ApiResponse> response = controller.getOrders();

        // Assert
        assertNotNull(response);
        assertTrue(response.getBody().getSuccess());
        verify(logger).info("Fetching new orders");
    }

    // The controller handles exceptions from the service layer gracefully
    @Test
    public void test_create_order_handles_service_exception() {
        // Arrange
        OrderCreationRequest request = new OrderCreationRequest();
        request.setUserId(new User());
        request.setProductDescription("Sample Product");
        request.setShippingAddress("123 Sample Street");
        request.setOrderItemsID(1L);

        OrderService orderService = mock(OrderService.class);
        doThrow(new AppException(ErrorCode.INVALID_REQUEST)).when(orderService).addOrder(request);
        RestOrderController controller = new RestOrderController(orderService);

        // Act
        ResponseEntity<ApiResponse> response = controller.createOrder(request);

        // Assert
        assertNotNull(response);
        assertEquals(400, response.getStatusCodeValue());  // Check the HTTP status
        ApiResponse<?> apiResponse = response.getBody();
        assertNotNull(apiResponse);
        assertFalse(apiResponse.getSuccess());

        // Compare the error code as an integer
        assertEquals(ErrorCode.INVALID_REQUEST.getCode(), apiResponse.getErrorCode());
        // Check the error message
        assertEquals(ErrorCode.INVALID_REQUEST.getMessage(), apiResponse.getErrorMessage());
    }

    // Order creation logs the request details
    @Test
    public void test_order_creation_logs_request_details() {
        // Arrange
        OrderCreationRequest request = new OrderCreationRequest();
        request.setUserId(new User());
        request.setProductDescription("Sample Product");
        request.setShippingAddress("123 Sample Street");
        request.setOrderItemsID(1L);

        OrderService orderService = mock(OrderService.class);
        RestOrderController controller = new RestOrderController(orderService);

        Logger logger = mock(Logger.class);
        RestOrderController.logger = logger;

        // Act
        controller.createOrder(request);

        // Assert
        verify(logger).info("Creating order with details: {}", request);
    }
}